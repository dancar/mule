// Generated by CoffeeScript 1.6.1
(function() {

  Ext.define("Muleview.view.MuleChart", {
    extend: "Ext.chart.Chart",
    requires: ["Muleview.view.Theme", "Ext.chart.series.Line", "Ext.chart.series.Area", "Ext.chart.axis.Numeric"],
    statics: {
      lastXY: [0, 0]
    },
    showAreas: true,
    highlight: true,
    legend: {
      position: "right"
    },
    animate: true,
    theme: "Muleview",
    timeLabel: {
      rotate: {
        degrees: 315
      }
    },
    tipsRenderer: function(storeItem, item) {
      var key, me, percent, percentText, timestamp, total, value;
      me = item.series.chart;
      key = item.storeField || me.topKey;
      value = storeItem.get(key);
      total = storeItem.get(me.topKey);
      percent = 100 * (value / total);
      percentText = Ext.util.Format.number(percent, "0.00");
      timestamp = me.timeFormatter(storeItem.get('timestamp'));
      return this.update({
        key: key.substring(key.lastIndexOf(".") + 1),
        timestamp: timestamp,
        total: Ext.util.Format.number(total, ","),
        value: Ext.util.Format.number(value, ","),
        percent: percentText
      });
    },
    timeFormatter: function(timestamp) {
      return Ext.Date.format(new Date(timestamp * 1000), Muleview.Settings.labelFormat);
    },
    initComponent: function() {
      var alert, areaKeys, key, keys, me, _fn, _i, _len, _ref,
        _this = this;
      me = this;
      this.timeLabel.renderer = this.timeFormatter;
      keys = this.keys;
      this.axes = [
        {
          type: "Numeric",
          position: "bottom",
          fields: ["timestamp"],
          label: this.timeLabel,
          grid: true
        }, {
          type: 'Numeric',
          position: 'left',
          fields: keys,
          minimum: 0,
          grid: true
        }
      ];
      areaKeys = Ext.Array.remove(Ext.Array.clone(keys), this.topKey);
      this.series = [];
      this.series.push({
        type: "line",
        axis: "left",
        title: this.keyLegendName(this.topKey),
        xField: "timestamp",
        yField: [this.topKey],
        highlight: true,
        listeners: {
          itemmouseover: function(item) {
            return Muleview.event("chartItemMouseOver", item);
          }
        },
        tips: {
          trackMouse: false,
          tpl: "{key} {value} ({timestamp})",
          renderer: this.tipsRenderer,
          targetXY: this.self.lastXY
        }
      });
      if (this.showAreas) {
        this.series.push({
          type: "area",
          axis: "left",
          xField: "timestamp",
          yField: areaKeys,
          title: (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = areaKeys.length; _i < _len; _i++) {
              key = areaKeys[_i];
              _results.push(this.keyLegendName(key));
            }
            return _results;
          }).call(this),
          highlight: this.highlight,
          listeners: {
            itemmouseover: function(item) {
              return Muleview.event("chartItemMouseOver", item);
            },
            itemclick: function(item) {
              return Muleview.event("graphRequest", item.storeField, Muleview.currentRetention);
            }
          },
          tips: {
            trackMouse: false,
            anchor: "left",
            tpl: "<b>{key}, {timestamp} </b></br><hr>{value} / {total} (<b>{percent}%</b>)",
            renderer: this.tipsRenderer,
            targetXY: this.self.lastXY,
            listeners: {
              afterrender: function(me) {
                return me.getEl().on({
                  mousemove: function() {
                    return me.hide();
                  }
                });
              }
            }
          }
        });
      }
      if (this.alerts) {
        _ref = this.alerts;
        _fn = function(alert) {
          if (!alert.time) {
            return _this.series.push({
              type: "line",
              title: "'" + alert.label + "' alert",
              showMarkers: true,
              style: {
                stroke: alert.color
              },
              markerConfig: {
                type: "arrow",
                radius: 0.1,
                opacity: 0
              },
              axis: "left",
              xField: "timestamp",
              yField: [alert.name],
              highlight: true,
              tips: {
                trackMouse: false,
                anchor: "bottom",
                title: "Alert",
                html: "<i><b>" + alert.label + "</b> (" + (Ext.util.Format.number(alert.value, ",")) + ")</i>",
                targetXY: _this.self.lastXY
              }
            });
          }
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          alert = _ref[_i];
          _fn(alert);
        }
      }
      this.callParent();
      return this.on({
        mousemove: function(e, opts) {
          return _this.self.lastXY = e.getXY();
        },
        scope: this
      });
    },
    keyLegendName: function(key) {
      return key.substring(key.lastIndexOf(".") + 1);
    }
  });

}).call(this);
