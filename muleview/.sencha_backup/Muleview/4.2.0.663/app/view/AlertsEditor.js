// Generated by CoffeeScript 1.6.1
(function() {

  Ext.define("Muleview.view.AlertsEditor", {
    extend: "Ext.form.Panel",
    alias: "widget.muleviewAlertsEditor",
    requires: ["Muleview.Settings", "Muleview.view.MuleTimeField", "Ext.container.Container"],
    bodyPadding: 10,
    layout: {
      type: "vbox",
      align: "stretch",
      pack: "start"
    },
    overflowY: "auto",
    title: "Alerts",
    items: [
      {
        xtype: "displayfield",
        fieldLabel: "Graph",
        name: "graphName"
      }
    ],
    formHashFromArray: function(arr, base) {
      var alert, _i, _len;
      if (base == null) {
        base = {};
      }
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        alert = arr[_i];
        base[alert.name] = alert.value;
      }
      return base;
    },
    load: function(curKey, curRet, alertsArr) {
      var data;
      data = {
        graphName: "" + curKey + ";" + curRet
      };
      data = this.formHashFromArray(Muleview.Settings.alerts, data);
      if (alertsArr) {
        data = this.formHashFromArray(alertsArr, data);
      }
      this.getForm().setValues(data);
      this.updateButtons((alertsArr ? "edit" : "create"));
      return this.fieldsContainer.setVisible(alertsArr);
    },
    createField: function(alert) {
      var ans;
      ans = {
        allowBlank: false,
        name: alert.name,
        value: 0,
        fieldLabel: alert.label
      };
      if (alert.time) {
        ans.xtype = "muletimefield";
      } else {
        ans.xtype = "numberfield";
      }
      return ans;
    },
    initComponent: function() {
      var alert, fields, _i, _len, _ref,
        _this = this;
      fields = [];
      _ref = Muleview.Settings.alerts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        alert = _ref[_i];
        fields.push(this.createField(alert));
      }
      this.fieldsContainer = Ext.create("Ext.container.Container", {
        layout: {
          type: "vbox",
          align: "stretch",
          pack: "start"
        },
        items: fields,
        border: false,
        hidden: true
      });
      this.items.push(this.fieldsContainer);
      this.buttonsContainer = Ext.create("Ext.container.Container", {
        border: false,
        layout: {
          type: "hbox",
          pack: "start"
        },
        defaults: {
          xtype: "button",
          margin: "0px 5px 0px 0px",
          hidden: true
        },
        items: [
          {
            text: "Save",
            handler: function() {
              return _this.doSave();
            },
            showInMode: ["edit", "creating"]
          }, {
            text: "Delete",
            handler: function() {
              return _this.doDelete();
            },
            showInMode: ["edit"]
          }, {
            text: "Set Alerts",
            handler: function() {
              return _this.doCreate();
            },
            showInMode: ["create"]
          }, {
            text: "Cancel",
            handler: function() {
              return _this.doCancel();
            },
            showInMode: ["creating"]
          }
        ]
      });
      this.items.push(this.buttonsContainer);
      return this.callParent();
    },
    updateButtons: function(mode) {
      return this.buttonsContainer.items.each(function(btn) {
        return btn.setVisible(Ext.Array.contains(btn.showInMode, mode));
      });
    },
    doSave: function() {
      if (this.getForm().isValid()) {
        return this.doMuleAction("PUT");
      }
    },
    doMuleAction: function(method) {
      return this.submit({
        url: Muleview.Mule.getAlertCommandUrl(Muleview.currentKey, Muleview.currentRetention),
        method: method,
        success: function() {
          return Muleview.event("refreshRequest");
        }
      });
    },
    doDelete: function() {
      var _this = this;
      return Ext.MessageBox.confirm("Delete alerts", "Are you sure you wish to delete all alerts for this graph?", function(res) {
        if (res === "yes") {
          return _this.doMuleAction("DELETE");
        }
      });
    },
    doCreate: function() {
      this.getForm().clearInvalid();
      this.fieldsContainer.show();
      return this.updateButtons("creating");
    },
    doCancel: function() {
      this.fieldsContainer.hide();
      return this.updateButtons("create");
    }
  });

}).call(this);
