// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty;

  Ext.define("Muleview.Graphs", {
    requires: ["Muleview.ParsedRetention", "Muleview.view.MuleChartPanel", "Muleview.view.MuleLightChart", "Ext.data.ArrayStore"],
    singleton: true,
    createGraphs: function(newKey, callback) {
      var _this = this;
      this.mainPanel = Ext.getCmp("mainPanel");
      this.rightPanel = Ext.getCmp("rightPanel");
      this.retentions = {};
      this.mainPanel.removeAll();
      this.mainPanel.setLoading(true);
      this.rightPanel.removeAll();
      this.rightPanel.setLoading(true);
      return Muleview.Mule.getKeyData(newKey, function(data, alerts) {
        var ret, retName, retention, retentionData, sortedRetentions, _;
        for (retention in data) {
          if (!__hasProp.call(data, retention)) continue;
          retentionData = data[retention];
          _this.retentions[retention] = _this.createRetentionGraphs(retention, retentionData, alerts);
        }
        _this.rightPanel.add((function() {
          var _ref, _results;
          _ref = this.retentions;
          _results = [];
          for (_ in _ref) {
            ret = _ref[_];
            _results.push(ret.lightGraph);
          }
          return _results;
        }).call(_this));
        sortedRetentions = Ext.Array.sort((function() {
          var _ref, _results;
          _ref = this.retentions;
          _results = [];
          for (retName in _ref) {
            ret = _ref[retName];
            _results.push([retName, ret]);
          }
          return _results;
        }).call(_this), function(_arg, _arg1) {
          var ret1, ret2, retName1, retName2;
          retName1 = _arg[0], ret1 = _arg[1];
          retName2 = _arg1[0], ret2 = _arg1[1];
          return new Muleview.ParsedRetention(retName1).value - new Muleview.ParsedRetention(retName2).value;
        });
        _this.mainPanel.add((function() {
          var _i, _len, _ref, _results;
          _results = [];
          for (_i = 0, _len = sortedRetentions.length; _i < _len; _i++) {
            _ref = sortedRetentions[_i], _ = _ref[0], ret = _ref[1];
            _results.push(ret.graph);
          }
          return _results;
        })());
        _this.mainPanel.setLoading(false);
        _this.rightPanel.setLoading(false);
        Muleview.event("graphsCreated");
        Muleview.currentKey = newKey;
        return typeof callback === "function" ? callback() : void 0;
      });
    },
    getAlerts: function(topKey, retention, alertsHash) {
      var ans, graphName, i, meta, raw, _i, _len, _ref;
      graphName = topKey + ";" + retention;
      ans = null;
      raw = alertsHash != null ? alertsHash[graphName] : void 0;
      if (raw) {
        ans = [];
        _ref = Muleview.Settings.alerts;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          meta = _ref[i];
          ans[i] = Ext.apply({
            value: raw[i]
          }, meta);
        }
      }
      return ans;
    },
    createRetentionGraphs: function(retName, retRawData, alertsHash) {
      var alerts, keys, lightGraph, mainGraphPanel, store, topKey;
      keys = Ext.Object.getKeys(retRawData);
      topKey = this.findTopKey(keys);
      alerts = this.getAlerts(topKey, retName, alertsHash);
      store = this.createStore(retRawData, keys, alerts);
      mainGraphPanel = Ext.create("Muleview.view.MuleChartPanel", {
        title: this.parseTitle(retName),
        retention: retName,
        keys: keys,
        topKey: topKey,
        alerts: alerts,
        store: store
      });
      lightGraph = Ext.create("Muleview.view.MuleLightChart", {
        title: this.parseTitle(retName),
        keys: keys,
        topKey: topKey,
        hidden: true,
        retention: retName,
        store: store
      });
      return {
        graph: mainGraphPanel,
        lightGraph: lightGraph,
        alerts: alerts
      };
    },
    findTopKey: function(keys) {
      var key, topKey, _i, _len;
      topKey = keys[0];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        if (key.length < topKey.length) {
          topKey = key;
        }
      }
      return topKey;
    },
    createStore: function(retentionData, keys, alerts) {
      var alert, count, fields, key, keyData, store, timestamp, timestamps, _, _i, _j, _k, _len, _len1, _len2, _ref;
      fields = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          _results.push({
            name: key,
            type: "integer"
          });
        }
        return _results;
      })();
      fields.push({
        name: "timestamp",
        type: "integer"
      });
      if (alerts) {
        for (_i = 0, _len = alerts.length; _i < _len; _i++) {
          alert = alerts[_i];
          fields.push({
            name: alert.name,
            type: "integer"
          });
        }
      }
      store = Ext.create("Ext.data.ArrayStore", {
        fields: fields,
        sorters: [
          {
            property: "timestamp"
          }
        ]
      });
      timestamps = {};
      for (key in retentionData) {
        if (!__hasProp.call(retentionData, key)) continue;
        keyData = retentionData[key];
        for (_j = 0, _len1 = keyData.length; _j < _len1; _j++) {
          _ref = keyData[_j], count = _ref[0], _ = _ref[1], timestamp = _ref[2];
          if (!timestamps[timestamp]) {
            timestamps[timestamp] = {
              timestamp: timestamp
            };
            if (alerts) {
              for (_k = 0, _len2 = alerts.length; _k < _len2; _k++) {
                alert = alerts[_k];
                timestamps[timestamp][alert.name] = alert.value;
              }
            }
          }
          timestamps[timestamp][key] = count;
        }
      }
      store.add(Ext.Object.getValues(timestamps));
      return store;
    },
    parseTitle: function(ret) {
      return new Muleview.ParsedRetention(ret).title;
    }
  });

}).call(this);
