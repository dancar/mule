// Generated by CoffeeScript 1.6.1
(function() {

  Ext.define("Muleview.controller.Viewport", {
    extend: "Ext.app.Controller",
    requires: ["Muleview.Events"],
    refs: [
      {
        ref: "leftPanel",
        selector: "#leftPanel"
      }, {
        ref: "rightPanel",
        selector: "#rightPanel"
      }, {
        ref: "mainPanelMaximize",
        selector: "#mainPanelMaximize"
      }, {
        ref: "mainPanelRestore",
        selector: "#mainPanelRestore"
      }, {
        ref: "mainPanel",
        selector: "#mainPanel"
      }, {
        ref: "alertsEditor",
        selector: "#alertsEditor"
      }
    ],
    onLaunch: function() {
      var _this = this;
      this.control({
        "#mainPanel": {
          tabchange: this.onTabChange
        },
        "#mainPanelRefresh": {
          click: function() {
            return _this.refreshGraph();
          }
        },
        "#mainPanelMaximize": {
          click: this.togglePanels
        },
        "#mainPanelRestore": {
          click: this.togglePanels
        },
        "#leftPanel": {
          collapse: this.updateMainPanelTools,
          expand: this.updateMainPanelTools
        },
        "#rightPanel": {
          collapse: this.updateMainPanelTools,
          expand: this.updateMainPanelTools
        }
      });
      this.getMainPanel().getEl().addListener("dblclick", this.togglePanels, this);
      return Muleview.Events.on({
        graphRequest: function(key, retention) {
          return _this.openGraph(key, retention);
        },
        refreshRequest: function() {
          return _this.refreshGraph();
        }
      });
    },
    isMainPanelExpanded: function() {
      return this.getLeftPanel().getCollapsed() && this.getRightPanel().getCollapsed();
    },
    togglePanels: function() {
      var expanded;
      expanded = this.isMainPanelExpanded();
      if (expanded) {
        this.getLeftPanel().expand(false);
        this.getRightPanel().expand(false);
      } else {
        this.getLeftPanel().collapse(Ext.Component.DIRECTION_LEFT);
        this.getRightPanel().collapse(Ext.Component.DIRECTION_RIGHT);
      }
      return this.updateMainPanelTools();
    },
    updateMainPanelTools: function() {
      var expanded;
      expanded = this.isMainPanelExpanded();
      this.getMainPanelMaximize().setVisible(!expanded);
      return this.getMainPanelRestore().setVisible(expanded);
    },
    refreshGraph: function() {
      return this.openGraph(Muleview.currentKey, Muleview.currentRetention, true);
    },
    openGraph: function(newKey, newRetention, refresh) {
      var _this = this;
      if (newKey !== Muleview.currentKey || refresh) {
        return Muleview.Graphs.createGraphs(newKey, function() {
          return _this.updateDisplay(newKey, newRetention);
        });
      } else if (newRetention !== Muleview.currentRetention) {
        return this.updateDisplay(newKey, newRetention);
      }
    },
    updateDisplay: function(newKey, newRetention) {
      var newTab, _ref;
      Muleview.currentKey = newKey;
      Muleview.currentRetention = newRetention;
      document.title = "Mule - " + Muleview.currentKey;
      this.getMainPanel().setTitle(Muleview.currentKey.replace(/\./g, " / "));
      Muleview.currentRetention || (Muleview.currentRetention = this.getMainPanel().items.first().retention);
      newTab = this.getMainPanel().items.findBy(function(tab) {
        return tab.retention === Muleview.currentRetention;
      });
      this.getMainPanel().setActiveTab(newTab);
      this.getRightPanel().items.each(function(lightGraph) {
        return lightGraph.setVisible(Muleview.currentRetention !== lightGraph.retention);
      });
      this.getAlertsEditor().load(Muleview.currentKey, Muleview.currentRetention, (_ref = Muleview.Graphs.retentions[Muleview.currentRetention]) != null ? _ref.alerts : void 0);
      Ext.History.add(Muleview.currentKey + ";" + Muleview.currentRetention);
      return Muleview.event("graphChanged", Muleview.currentKey, Muleview.currentRetention);
    },
    onTabChange: function(me, selectedTab) {
      return this.openGraph(Muleview.currentKey, selectedTab.retention);
    }
  });

}).call(this);
