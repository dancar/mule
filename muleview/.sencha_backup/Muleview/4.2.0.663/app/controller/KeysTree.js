// Generated by CoffeeScript 1.6.1
(function() {

  Ext.define("Muleview.controller.KeysTree", {
    extend: "Ext.app.Controller",
    requires: ["Muleview.Events"],
    models: ["MuleKey"],
    refs: [
      {
        ref: "tree",
        selector: "#keysTree"
      }, {
        ref: "mainPanel",
        selector: "#mainPanel"
      }
    ],
    onSelectionChange: function(me, selected) {
      var key;
      if (!selected[0]) {
        return;
      }
      key = selected[0].get("fullname");
      return Muleview.event("graphRequest", key, Muleview.currentRetention);
    },
    onLaunch: function() {
      this.store = this.getTree().getStore();
      this.getTree().on({
        selectionchange: this.onSelectionChange,
        itemexpand: this.onItemExpand,
        scope: this
      });
      Muleview.Events.on({
        graphChanged: this.updateSelection,
        keysReceived: this.addKeys,
        scope: this
      });
      return this.fillFirstkeys();
    },
    onItemExpand: function(node) {
      var _this = this;
      node.set("loading", true);
      return this.fetchKeys(node.get("fullname"), function(keys) {
        var key, record, _i, _len;
        for (_i = 0, _len = keys.length; _i < _len; _i++) {
          key = keys[_i];
          record = _this.store.getById(key);
          if (record.parentNode === node && !record.firstChild) {
            record.set("leaf", true);
            record.set("loaded", true);
          }
        }
        return node.set("loading", false);
      });
    },
    fillFirstkeys: function() {
      var root;
      root = this.getMuleKeyModel().create({
        name: "root",
        fullname: "_root"
      });
      this.store.setRootNode(root);
      return this.fetchKeys("");
    },
    fetchKeys: function(parent, callback) {
      var _this = this;
      return Muleview.Mule.getSubKeys(parent, 2, function(keys) {
        _this.addKeys(keys);
        return typeof callback === "function" ? callback(keys) : void 0;
      });
    },
    addKeys: function(newKeys) {
      var key, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = newKeys.length; _i < _len; _i++) {
        key = newKeys[_i];
        _results.push(this.addKey(key));
      }
      return _results;
    },
    addKey: function(key) {
      var existingNode, newNode, parent, parentName;
      if (!key) {
        return this.store.getRootNode();
      }
      existingNode = this.store.getById(key);
      if (existingNode) {
        return existingNode;
      }
      parentName = key.substring(0, key.lastIndexOf("."));
      parent = this.addKey(parentName);
      newNode = this.getMuleKeyModel().create({
        name: key.substring(key.lastIndexOf(".") + 1),
        fullname: key
      });
      parent.appendChild(newNode);
      return newNode;
    },
    updateSelection: function(newKey) {
      var record, _results;
      record = this.store.getById(newKey);
      this.getTree().getSelectionModel().select(record, false, true);
      _results = [];
      while (record) {
        record.expand();
        _results.push(record = record.parentNode);
      }
      return _results;
    }
  });

}).call(this);
